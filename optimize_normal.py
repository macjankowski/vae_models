import numpy as np
import tensorflow as tf

sample = np.array([[1.947,-0.259,4.27,1.407,1.567,-8.1,4.799,6.377,0.986,5.626,3.079,2.888,8.719,-1.977,
                    9.307,3.986,-4.16,0.328,5.469,-5.848,1.063,-0.131,3.341,1.402,0.932,3.219,9.717,
                    -4.186,7.054,0.045,-1.563,-0.564,-3.918,-3.784,2.112,-3.258,2.3,-8.386,3.762,5.717,
                    1.913,-2.107,-1.703,4.817,-4.855,-4.634,5.482,-6.946,8.021,-1.085,2.578,-2.349,
                    -3.449,1.628,-3.872,5.726,-5.694,8.034,-4.169,-6.812,-2.363,-0.22,4.384,1.79,3.464,
                    8.232,16.486,12.031,0.958,3.851,-0.898,-1.787,-2.549,1.772,-6.307,2.684,-10.575,
                    5.415,2.721,-2.981,0.704,-0.705,6.792,3.695,2.793,8.488,-2.355,-2.625,-1.312,2.186,
                    4.72,4.954,8.599,-7.744,1.521,-1.445,2.701,11.404,1.047,0.309,-6.19,1.405,-2.038,
                    9.793,5.581,8.222,7.214,-7.551,8.932,3.185,1.276,-1.368,-2.567,-3.317,10.643,-0.542,
                    4.856,0.148,13.388,0.734,7.004,-0.266,5.519,10.749,-1.6,1.876,-2.553,0.422,10.083,
                    -4.423,3.031,1.647,5.494,0.952,3.551,3.862,-3.679,-0.125,7.362,-1.147,5.143,5.986,
                    4.871,-4.628,-4.068,4.532,-4.099,5.639,2.254,-0.091,4.806,-0.306,1.012,6.812,-1.012,
                    1.627,7.799,3.497,6.22,0.095,-4.748,3.979,3.137,7.14,-0.696,2.678,4.564,-0.795,4.194,
                    17.029,-3.14,4.834,11.941,3.882,-3.871,10.001,-8.004,1.581,3.91,8.11,-8.216,3.184,
                    5.841,-3.512,6.621,1.714,11.368,8.698,4.902,-1.459,2.23,-1.121,3.474,-5.301,6.035,
                    5.286,4.725,3.146,5.632,6.358]]).T

# sample = np.array([[3.112,-1.026,-3.086,8.492,6.535,-2.225,6.831,-6.186,2.255,-3.091,3.807,-2.158,
#                     -3.928,-1.856,-2.266,0.49,1.619,5.339,-3.83,4.39,6.652,6.518,1.152,-1.862,-6.184,
#                     -7.543,9.812,-5.017,-4.782,-0.429,-7.903,5.535,3.273,-0.671,1.468,8.683,-4.07,
#                     1.038,-4.189,-0.718,4.226,12.168,-1.124,-4.588,0.338,5.516,-0.914,-2.801,-4.436,
#                     5.279,3.477,1.936,4.065,6.159,6.964,3.851,-3.481,-6.9,4.55,-2.818,-1.675,5.686,5.602,
#                     -1.613,9.086,5.631,-0.278,2.997,3.013,5.876,-4.044,1.58,7.953,-0.366,-0.647,-1.848,
#                     3.365,4.437,-3.026,13.266,-1.055,-3.419,4.829,-6.723,9.87,1.053,-3.072,1.706,0.43,
#                     11.342,1.13,-1.466,5.29,2.861,7.057,7.643,-5.841,3.751,7.696,-4.74,11.799,-3.088,
#                     5.284,3.54,4.254,2.291,7.816,-1.535,8.572,-3.333,5.741,-2.693,8.076,-3.86,8.556,
#                     -0.024,2.131,-3.023,7.184,-1.171,-8.255,7.015,5.735,7.213,4.556,6.957,5.895,-12.938,
#                     -3.435,7.019,2.831,0.793,0.609,-7.199,3.998,-5.462,9.131,-3.864,2.606,3.023,4.943,
#                     3.427,-10.861,9.44,-6.959,8.468,1.574,0.155,8.106,-2.462,-2.954,-9.265,1.271,3.86,
#                     8.925,7.809,2.822,1.095,-3.832,-5.305,8.222,-5.832,4.465,-0.322,-0.435,0.923,5.361,
#                     4.353,10.826,-2.412,-1.945,8.115,1.752,6.973,1.008,6.949,7.008,5.435,4.046,5.671,
#                     12.652,-4.942,0.769,1.646,9.377,-6.19,1.337,3.282,5.566,0.021,6.056,5.219,6.704,
#                     -7.332,2.757,4.418,2.218,-3.767,6.151,2.245,-2.755,-2.129,4.299,2.988,-4.252,6.896,
#                     -4.16,0.668,-6.248,4.283,8.428,4.515,1.902,7.464,7.005,0.846,3.3,-0.333,3.075,2.827,
#                     3.481,-2.537,-1.057,-0.805,2.618,-0.848,0.394,1.039,1.069,5.401,-2.007,-1.425,3.365,
#                     -3.573,-4.444,9.549,4.214,5.775,0.741,0.534,1.004,-1.82,3.59,5.136,-4.211,8.365,
#                     -2.015,-12.325,-1.64,5.674,-4.94,-4.592,4.292,-3.031,5.489,0.962,4.674,9.495,10.672,
#                     2,2.836,2.105,4.654,-1.312,-5.944,-10.267,-7.387,7.571,5.077,7.209,15.413,4.459,
#                     4.113,7.406,6.724,1.456,3.747,1.705,7.713,2.889,8.108,3.096,3.955,1.882,-0.313,
#                     0.53,-4.432,0.099,7.888,13.674,9.922,3.697,-5.158,-0.058,4.142,0.426,-6.69,6.203,
#                     -1.696,3.639,7.913,2.463,8.773,-1.476,14.703,-6.931,5.1,5.437,-5.413,2.324,0.404,
#                     -0.95,-4.665,-0.7,0.073,0.604,-4.955,0.324,8.548,-3.405,-5.351,8.565,0.725,-0.775,
#                     -5.409,3.777,7.522,-4.738,-1.807,-3.314,-1.916,1.225,4.864,-3.273,-2.677,7.08,
#                     8.173,1.21,-5.264,0.935,-1.428,3.198,7.054,0.614,1.076,12.983,-1.594,3.765,-7.3,
#                     9.1,2.941,-2.219,8.228,9.408,6.49,0.767,0.326,-2.367,9.417,3.288,-0.859,5.889,
#                     2.116,4.84,-2.337,3.906,-1.946,7.677,-1.5,0.486,8.993,14.361,-1.586,6.052,-11.226,
#                     6.971,6.173,2.951,4.328,-0.465,0.961,-5.189,0.862,4.428,-2.242,5.153,3.251,5.042,
#                     2.995,9.454,2.968,3.384,-3.671,4.617,-0.976,0.003,4.545,3.832,6.565,-2.317,-9.584,
#                     8.81,2.19,6.805,0.418,-1.645,-0.464,4.267,-0.134,1.349,2.081,-5.183,-3.747,-3.107,
#                     -1.949,2.838,-9.237,-3.124,-4.61,2.385,-5.892,9.061,1.025,-4.194,0.631,1.426,-7.151,
#                     -1.003,-6.315,0.553,-3.532,4.392,4.139,-0.27,-5.38,2.716,-3.42,-2.248,2.418,8.309,
#                     4.706,5.006,7.39,-7.395,2.679,-2.385,7.698,-8.107,6.348,5.578,9.314,-1.339,6.522,
#                     -3.156,-1.571,1.273,2.181,3.082,0.497,4.125,-6.662,13.203,10.057,-0.319,0.514,-7.475,
#                     -0.72,2.778,-4.135,4.159,0.986,5.624,-4.02,8.123,-3.756,5.427,-3.888,8.309,6.611,
#                     -0.239,1.719,-1.796,5.798,-6.478,1.62,6.525,3.815,-3.983,8.632,6.889,8.889,5.004,
#                     2.945,0.866,-7.346,-0.899,6.656,7.741,4.214,8.672]]).T

#np.random.shuffle(sample)

mean = tf.Variable(0, dtype=tf.float64)
stdev = tf.Variable(1, dtype=tf.float64)

x = tf.placeholder(tf.float64)

dist = tf.contrib.distributions.Normal(loc=mean, scale=stdev)

log_likelihood_arr = dist.log_prob(x)
log_likelihood = tf.reduce_sum(log_likelihood_arr)

optimizer = tf.train.GradientDescentOptimizer(0.005)
#optimizer = tf.train.RMSPropOptimizer(0.5)
#optimizer = tf.train.AdamOptimizer(learning_rate=1e-2)
train_op = optimizer.minimize(-1.0 * log_likelihood)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for i in range(500):
    sess.run(train_op, feed_dict={x: sample})
    if i % 100 == 0:
        print(sess.run(log_likelihood, feed_dict={x: sample}))


sample_mean = np.sum(sample)/len(sample)
sample_variance = np.sum(np.power(sample - sample_mean,2))/(len(sample) - 1)
#print("Analitical estimation from sample")
print(sample_mean)
print(np.sqrt(sample_variance))

#print("Estimation from optimization")
print(sess.run(mean))
print(sess.run(stdev))
